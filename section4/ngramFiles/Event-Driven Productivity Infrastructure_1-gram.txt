eventdriven
productivity
infrastructure
hugh
taylor
lecturer
uc
berkeley
school
of
information
senior
marketing
manager
microsoft
hughtasims
berkeley
edu
www
hughtaylorite
com
abstract
the
world
of
information
technology
is
currently
experiencing
the
parallel
emergence
of
two
separate
paradigms
eventdriven
architecture
eda
and
productivity
infrastructure
pi
each
of
these
constructs
has
unique
portent
for
the
ways
in
which
people
interact
with
data
and
applications
however
there
is
also
an
exciting
potential
for
the
two
constructs
to
work
together
in
an
integrated
synergistic
fashion
eda
is
an
approach
to
serviceoriented
architecture
soa
that
creates
an
enterprise
nervous
system
aware
of
changes
in
state
that
occur
within
applications
databases
as
well
as
the
outside
world
by
publishing
state
information
through
xml
to
a
message
backbone
such
as
an
enterprise
service
bus
esb
event
listeners
also
connected
to
the
esb
distribute
state
change
data
to
serviceoriented
applications
for
processing
and
reaction
including
human
interactions
the
eda
approach
to
enterprise
architecture
offers
advantages
in
agility
and
segregation
of
concerns
that
benefit
the
utility
of
information
systems
productivity
infrastructure
pi
is
an
umbrella
term
to
describe
peoples
and
organizations
increasingly
connected
and
synergistic
use
of
phone
email
internet
pda
pda
intranet
extranet
and
desktop
productivity
applications
what
was
once
a
collection
of
essentially
siloed
productivity
technologies
and
work
flows
phone
calls
emails
searching
the
web
creating
documents
using
a
pda
and
so
on
are
now
merging
into
a
combined
infrastructure
that
drives
personal
and
organization
productivity
in
brand
name
terms
productivity
infrastructure
is
integrating
the
functionality
of
product
sets
such
as
microsofts
office
system
ciscos
voip
solutions
ibms
lotus
suite
and
googles
docs
and
gmail
services
just
to
name
a
few
this
paper
explores
the
potential
integration
of
eda
with
productivity
infrastructure
events
that
originate
from
applications
in
the
eda
can
be
published
to
individual
human
users
or
collaborative
groups
operating
in
the
productivity
infrastructure
the
integration
has
the
potential
to
connect
real
time
operations
of
an
enterprise
with
web
technologies
such
as
blogs
and
wikis
as
well
as
a
range
of
mobile
computing
technologies
in
addition
to
standard
portal
interfaces
the
paper
focuses
on
the
ways
that
productivity
infrastructure
empowers
the
human
thinking
and
decision
making
that
is
often
implicit
in
the
process
flow
of
an
eda
it
looks
at
scenarios
where
edapi
integration
can
improve
the
speed
quality
and
cost
effectiveness
of
end
users
in
a
large
enterprise
environment
further
the
paper
will
examine
the
potential
for
real
time
human
activities
to
become
events
themselves
which
can
flow
in
the
other
direction
and
drive
application
functioning
in
the
eda
taylor
eventdriven
productivity
infrastructure
table
of
contents
abstract
introduction
background
of
research
eda
a
working
systemic
definition
defining
an
event
eda
overview
event
producers
or
publishers
event
listeners
or
consumers
event
processors
event
reactions
messaging
backbone
assembling
the
paradigmatic
eda
the
flavors
of
eda
the
often
inadequate
human
link
in
the
eda
overview
of
productivity
infrastructure
the
potential
benefits
of
edapi
integration
prodco
an
edapi
integration
scenario
sales
proposal
and
order
fulfillment
at
prodco
prod
cos
current
productivity
tools
prodcos
proposed
eda
a
better
proposal
edapi
integration
edapi
integration
requirements
piedas
target
architecture
implementation
conclusion
taylor
eventdriven
productivity
infrastructure
introduction
jerry
seinfeld
does
a
routine
where
he
wonders
how
mankind
discovered
that
glue
can
be
made
from
horses
he
describes
a
scene
where
someone
is
trying
unsuccessfully
to
stick
two
pieces
of
paper
together
when
suddenly
a
horse
rides
by
causing
an
instant
revelation
of
potential
hey
wait
a
minute
he
imagines
the
brilliant
inventor
saying
how
come
i
never
thought
of
that
before
so
it
is
too
in
it
sometimes
trends
of
technological
innovation
exist
in
parallel
for
a
period
time
before
someone
realizes
that
they
can
be
put
to
work
together
for
a
greater
effect
than
either
one
on
its
own
there
are
some
great
examples
of
this
from
the
history
of
technology
including
the
merging
of
recording
technology
and
the
telephone
creating
the
answering
machine
the
joining
of
the
qwtry
keyboard
with
the
cathode
ray
tube
and
the
cpu
the
modern
computer
or
the
phone
with
the
computer
networked
computing
today
we
are
witnessing
the
parallel
maturing
of
eventdriven
architecture
eda
typically
a
subset
of
serviceoriented
architecture
soa
and
productivity
infrastructure
two
separate
but
potentially
synergetic
information
technologies
each
is
powerful
in
its
own
right
but
together
they
can
create
transcendent
event
driven
information
processing
environments
this
paper
will
explore
the
potential
integration
of
eda
with
productivity
infrastructure
in
particular
we
will
focus
on
the
ways
that
productivity
infrastructure
empowers
the
human
thinking
and
decision
making
that
is
often
implicit
in
the
process
flow
of
an
eda
to
illustrate
the
potential
for
the
integration
of
productivity
infrastructure
and
eda
we
will
use
a
hypothetical
example
of
a
business
that
connects
its
purchasing
process
and
related
transactional
systems
with
its
productivity
infrastructure
including
email
voip
blogs
and
instant
messaging
i
will
use
the
case
study
of
a
hypothetical
business
to
understand
the
edapi
connection
because
the
current
state
of
the
technology
does
not
reflect
its
future
potential
at
the
conclusion
of
this
paper
i
will
take
a
quick
look
at
several
of
the
emerging
products
that
are
on
track
to
fulfill
the
potential
of
edapi
integration
background
of
research
the
subject
of
connecting
backend
transactional
systems
with
messaging
infrastructure
is
not
new
there
are
numerous
examples
of
comparable
structures
such
as
interactive
voice
response
ivr
or
snmp
alerts
forwarded
from
system
management
consoles
to
pagers
and
so
forth
the
concept
of
linking
instant
messaging
presence
and
email
with
xml
messages
used
in
business
transactions
arises
frequently
in
standards
literature
commercial
software
development
papers
and
academic
discussions
of
messaging
and
serviceoriented
architecture
for
example
there
is
the
soap
mailto
command
in
soa
due
to
the
inherent
commercial
promise
of
edapi
integration
and
the
commercial
basis
for
much
of
the
installed
base
of
infrastructure
much
of
the
dialogue
about
edapi
integration
is
occurring
in
the
commercial
sphere
for
example
ibm
and
nortel
announced
in
a
plan
to
offer
an
integration
between
soa
and
voip
or
the
new
oslo
soa
offerings
from
microsoft
contain
a
foundation
for
linking
business
process
modeling
web
services
and
email
messaging
this
paper
tries
to
go
one
step
further
and
explore
a
vision
of
edapi
integration
that
has
not
yet
been
achieved
in
the
commercial
world
though
one
which
may
become
a
reality
in
the
near
future
httpcpan
uwinnipeg
cahtdocssoaplitemailto
pm
html
nortel
and
ibm
use
soa
to
streamline
communications
among
customers
employees
and
partners
taylor
eventdriven
productivity
infrastructure
eda
a
working
systemic
definition
eventdriven
architecture
is
an
approach
to
enterprise
software
architecture
that
is
characterized
by
the
ability
of
the
enterprise
to
detect
events
and
react
to
them
brenda
michelson
a
technology
analyst
writes
in
an
eventdriven
architecture
a
notable
thing
happens
inside
our
outside
your
business
which
disseminates
immediately
to
all
interested
parties
human
or
automated
the
interested
parties
evaluate
the
event
and
optionally
take
action
to
keep
the
discussion
simple
i
am
going
to
make
the
following
assumption
eventdriven
architecture
in
the
modern
sense
is
based
on
the
set
of
xml
messaging
standards
and
interoperability
technologies
collectively
known
as
serviceoriented
architecture
soa
these
technologies
include
soap
web
services
uddi
wsdl
enterprise
service
bus
esb
and
industrycommercial
solutions
such
as
java
connector
architecture
jca
windows
communication
foundation
wcf
java
message
service
jms
and
so
forth
though
there
are
many
different
equally
valid
approaches
to
the
realization
of
eda
i
will
focus
on
the
soa
version
because
it
now
the
de
fact
mode
of
implementation
of
the
eda
paradigm
defining
an
event
first
lets
define
what
we
mean
by
an
event
in
life
an
event
is
something
that
happens
a
car
drives
by
a
ball
flies
through
your
window
someone
falls
asleep
an
action
occurs
alternatively
for
our
purposes
an
event
can
also
be
an
expected
action
that
does
not
occur
if
the
temperature
does
not
go
down
at
night
that
could
be
an
event
in
systemic
terms
an
event
generally
refers
to
a
change
in
state
a
change
in
state
typically
means
that
a
data
value
has
changed
for
example
if
you
make
a
credit
card
charge
there
are
several
values
that
change
in
state
as
the
transaction
is
processed
the
value
of
your
account
balance
will
change
as
you
make
the
charge
as
will
the
state
of
your
card
from
quiet
to
transaction
occurring
and
so
on
the
shift
from
balance
to
balance
is
an
event
an
event
has
three
levels
of
detail
at
one
level
there
is
the
basic
fact
that
an
event
has
occurred
an
event
has
either
occurred
or
not
this
takes
us
to
the
second
level
of
detail
which
is
the
event
definition
in
order
to
recognize
an
event
an
eda
must
have
a
definition
of
what
the
event
is
in
the
credit
card
example
the
eda
must
work
with
a
definition
of
an
event
that
says
in
effect
a
change
in
balance
event
has
occurred
whenever
the
balance
value
goes
up
what
if
the
balance
goes
down
is
that
also
an
event
it
could
be
but
the
definition
would
need
to
take
that
into
account
thirdly
there
is
the
detail
of
the
specific
event
how
much
has
the
card
balance
changed
in
our
example
the
twolevel
event
information
structure
would
say
soandsos
balance
has
changed
amount
all
three
factors
event
notification
event
definition
and
event
detail
are
necessary
when
designing
an
eda
for
an
event
to
occur
in
an
eda
it
must
be
in
digital
form
or
a
form
that
computer
can
understand
however
that
does
not
mean
that
an
eda
is
exclusively
the
preserve
of
digital
information
a
change
in
state
can
also
result
from
non
digital
information
being
translated
into
digital
form
for
example
a
digital
thermometer
typically
has
some
kind
of
analogue
temperature
sensor
which
inputs
temperature
information
into
the
sensor
and
results
in
a
digital
value
equated
to
temperature
the
edges
of
an
eda
may
be
full
of
analog
information
that
is
translated
into
digital
data
in
order
to
trigger
events
michelson
brenda
elemental
links
taylor
eventdriven
productivity
infrastructure
a
key
learning
point
here
is
to
understand
that
virtually
anything
can
be
an
event
or
trigger
an
event
rainfall
in
chad
could
be
an
event
if
it
is
quantified
and
made
available
as
a
source
of
data
stock
market
activity
in
tokyo
absolutely
an
event
assuming
you
know
why
you
are
interested
and
on
and
on
an
ideal
eda
can
be
easily
adapted
to
recognize
events
that
occur
anywhere
the
trickiest
word
in
the
last
sentence
was
easily
a
simple
idea
that
can
generate
a
lot
of
discussion
and
complexity
eda
overview
armed
with
a
sense
of
what
an
event
can
be
we
can
now
add
some
flesh
to
the
basic
eda
definition
articulated
by
brenda
michelson
if
an
event
is
any
notable
thing
that
happens
inside
our
outside
our
businesses
then
an
eda
is
the
complete
array
of
architectural
elements
including
design
planning
technology
organization
and
so
on
which
enables
the
ability
to
disseminate
the
event
immediately
to
all
interested
parties
human
or
automated
the
eda
also
provides
the
basis
for
interested
parties
to
evaluate
the
event
and
optionally
take
action
the
reason
that
eda
is
a
challenging
concept
is
that
it
is
so
potentially
broad
just
as
almost
any
piece
of
data
analog
or
digital
can
be
an
event
and
any
system
in
the
universe
can
potentially
be
part
of
your
eda
where
do
you
begin
to
draw
the
boundaries
and
definition
of
an
eda
that
makes
sense
to
your
organization
though
there
is
no
bullet
proof
way
to
answer
the
question
i
think
that
it
makes
sense
to
identify
the
main
ingredients
of
an
eda
and
build
the
definition
from
these
constructs
event
producers
or
publishers
in
order
to
have
an
eda
we
must
first
have
events
that
may
seem
obvious
but
a
lot
of
otherwise
sophisticated
discussions
of
eda
either
neglect
or
muddle
up
this
central
enabling
concept
the
eda
cannot
work
unless
it
has
the
ability
to
perceive
that
an
event
has
occurred
for
that
to
happen
the
event
must
be
created
and
then
published
for
the
components
of
the
eda
called
listeners
to
hear
them
the
technologies
that
do
this
are
known
as
event
publishers
or
event
producers
with
the
broad
definition
of
an
event
event
publishers
can
take
many
different
forms
most
are
software
programs
though
an
event
publisher
can
also
be
a
dedicated
piece
of
hardware
that
translates
analog
data
into
digital
form
and
feeds
it
into
software
that
can
detect
an
event
here
are
some
core
ideas
to
keep
in
mind
about
event
publishers
event
publishers
can
be
anywhere
because
events
can
occur
outside
of
your
enterprise
event
publishers
that
relate
to
your
eda
can
be
pretty
much
any
place
imagine
the
relationship
between
an
airline
eda
and
the
faa
radar
tower
the
radar
tower
which
serves
many
purposes
one
of
which
is
to
be
an
event
publisher
is
completely
separate
from
the
airlines
systems
yet
it
is
part
of
the
eda
event
publishers
may
or
may
not
originate
the
data
that
is
contained
in
the
event
itself
in
their
purest
form
an
event
publisher
generates
a
piece
of
data
that
is
formatted
to
be
heard
as
an
event
in
accordance
with
the
edas
setup
for
this
process
for
example
a
credit
card
processing
system
should
automatically
generate
data
that
is
eda
ready
it
contains
the
card
holders
identifiers
the
time
of
the
transaction
the
amount
the
merchant
name
and
so
on
of
course
the
data
was
created
for
the
purpose
of
charging
the
card
not
feeding
the
eda
but
it
serves
that
purpose
quite
readily
in
contrast
other
event
publishers
need
to
translate
data
into
a
format
that
constitutes
an
event
according
to
what
the
eda
requires
for
example
there
is
no
inherent
event
pattern
in
the
tokyo
stock
exchange
index
unless
you
specifically
instruct
an
event
publisher
to
transmit
data
about
the
index
in
a
manner
that
makes
sense
to
your
edas
purposes
taylor
eventdriven
productivity
infrastructure
event
listeners
or
consumers
like
event
publishers
event
listeners
can
be
anywhere
in
theory
the
event
listener
or
consumer
has
a
communication
link
with
the
event
publishers
that
is
not
always
the
case
but
we
will
work
under
that
assumption
for
now
the
event
listener
is
a
piece
of
technology
typically
software
based
but
also
hardware
that
knows
how
to
differentiate
an
event
as
it
is
defined
from
other
data
it
receives
in
the
simplest
form
of
eda
the
event
listener
can
only
receive
the
specific
event
data
that
it
is
meant
to
hear
for
example
an
eda
for
building
security
may
be
based
on
a
burglar
alarm
whose
event
listeners
can
only
hear
one
kind
of
event
the
kind
created
by
window
break
detecting
event
producers
there
is
just
one
kind
of
event
that
can
occur
a
break
in
the
real
world
of
course
is
more
complex
and
as
we
progress
we
will
get
into
more
involved
eda
setups
event
listeners
also
need
to
know
what
they
are
listening
for
an
application
that
reads
the
data
stream
of
the
tokyo
stock
market
average
is
not
an
event
listener
until
it
has
been
instructed
to
listen
for
some
specific
type
of
event
for
instance
the
event
listener
must
know
that
a
gain
of
or
more
in
the
average
is
an
event
a
gain
is
not
an
event
the
event
listener
must
be
able
to
detect
the
event
and
be
capable
of
learning
what
the
event
is
event
processors
after
an
event
has
occurred
and
been
published
and
consumed
or
listened
to
it
must
be
processed
it
does
little
good
to
have
an
event
that
is
perceived
but
not
handled
an
eda
without
event
processors
brings
to
mind
the
great
joke
about
economists
a
man
gets
lost
in
a
hot
air
balloon
after
drifting
for
hours
he
finally
sees
an
economist
standing
on
the
ground
the
man
yells
out
where
am
i
to
which
the
economist
replies
youre
up
in
the
air
unlike
the
economist
who
may
know
the
facts
but
be
unable
to
make
any
sense
of
them
an
eda
should
have
the
capacity
to
interpret
the
events
it
hears
an
event
processor
is
invariably
a
piece
of
software
while
it
may
or
may
not
be
part
of
some
larger
more
comprehensive
suite
of
applications
an
event
processor
is
distinctive
because
it
has
the
ability
to
assess
events
determine
their
importance
and
generate
a
reaction
of
some
kind
even
if
the
reaction
is
do
nothing
event
reactions
following
our
chain
of
activities
we
have
an
event
which
is
published
by
an
event
publisher
heard
by
an
event
listener
and
processed
by
an
event
processor
then
something
or
nothing
needs
to
happen
because
something
happening
is
inherently
more
interesting
than
nothing
happening
lets
look
at
event
reactions
that
require
action
reactions
to
an
event
in
an
eda
vary
widely
from
automated
application
responses
to
automated
notifications
sent
either
to
applications
or
people
to
purely
human
reactions
based
on
business
processes
that
occur
outside
of
the
eda
itself
in
the
purely
automated
application
response
category
we
might
see
an
eda
that
reactions
to
an
event
by
initiating
an
application
level
process
for
example
in
the
credit
card
fraud
example
the
eda
might
modify
a
variable
value
from
normal
to
warning
based
on
an
event
that
suggested
that
fraud
were
occurring
if
this
reaction
were
coded
into
the
event
reaction
it
will
happen
without
any
human
involvement
following
from
this
another
related
branch
of
processes
might
handle
new
charge
requests
on
the
taylor
eventdriven
productivity
infrastructure
account
differently
based
on
a
warning
value
than
from
a
normal
state
event
processors
and
reactions
can
be
linked
and
interdependent
the
event
reaction
might
be
machinetohuman
continuing
with
our
example
imagine
that
there
is
a
customer
service
representative
who
sees
all
the
new
warning
value
changes
and
is
prompted
to
call
the
cardholder
to
inquire
about
the
status
of
their
card
this
approach
to
eda
is
dependent
on
the
human
reaction
to
an
event
a
situation
that
may
be
good
or
bad
depending
on
the
desired
outcome
for
example
many
intrusion
detection
systems
that
monitor
networks
for
unauthorized
access
attempts
generate
a
great
deal
of
false
positives
the
system
itself
which
is
essentially
a
tightly
defined
eda
will
only
be
as
good
as
the
person
who
monitors
it
indeed
there
are
some
intrusion
detections
that
are
not
monitored
at
all
what
these
defectively
implemented
systems
do
is
generate
logs
consisting
of
thousands
of
possible
intrusion
records
which
are
essentially
useless
the
takeaway
here
is
that
the
human
reaction
is
very
much
part
of
the
eda
design
even
though
it
does
not
involve
technology
per
se
finally
there
are
edas
where
the
event
reaction
is
based
on
an
entirely
human
set
of
processes
following
the
detection
and
processing
of
the
original
event
for
example
an
eda
might
generate
a
number
of
alerts
a
number
of
stock
market
indicators
an
investor
then
reviews
the
alerts
and
decides
whether
to
buy
or
sell
once
again
the
eda
design
must
take
into
account
the
human
reaction
as
part
of
its
eventual
success
or
failure
and
with
this
type
of
complex
human
decisionmaking
it
can
be
quite
challenging
to
determine
what
the
right
reaction
should
be
experts
may
differ
on
how
to
react
to
identical
sets
of
event
alerts
as
they
say
on
wall
street
these
differences
of
opinion
make
for
a
good
horse
race
messaging
backbone
the
fifth
and
final
core
component
of
an
eda
is
the
messaging
backbone
the
communication
infrastructure
inclusive
of
hardware
software
network
protocols
and
message
formats
that
enables
each
piece
of
the
eda
to
communicate
with
one
another
in
order
to
serve
an
eda
effectively
a
messaging
backbone
must
have
several
characteristics
an
eda
messaging
backbone
needs
to
be
as
near
to
universal
as
possible
meaning
that
it
should
enable
messaging
across
multiple
network
transport
protocols
and
data
formats
in
other
words
it
should
be
standards
based
or
have
the
ability
to
mediate
across
multiple
messaging
standards
it
should
be
pervasive
i
e
farreaching
and
universally
accessible
in
reality
this
means
that
it
is
based
on
the
internet
though
it
need
not
be
it
should
be
inexpensive
to
develop
maintain
and
modify
a
lot
easier
said
than
done
but
this
is
a
critical
cost
is
the
invisible
hand
that
has
killed
many
great
eda
initiatives
finally
it
should
enable
a
high
level
of
decoupling
between
event
producers
and
event
consumers
in
reality
this
usually
translates
into
a
publishsubscribe
or
pubsub
set
up
the
messaging
backbone
is
arguably
the
most
essential
piece
of
the
eda
puzzle
for
without
it
there
can
be
no
eda
without
the
ability
to
communicate
the
event
listeners
producers
processors
or
reaction
processes
cannot
work
now
you
might
be
thinking
yes
of
course
they
can
one
can
always
create
communication
interfaces
between
systems
of
course
this
has
been
true
for
many
years
the
reality
though
is
that
proprietary
interfaces
which
have
been
the
traditional
way
to
achieve
connections
are
costly
to
develop
maintain
and
modify
so
costly
in
fact
that
they
have
rendered
the
concept
of
a
dynamic
eda
virtually
impossible
to
realize
as
i
have
noted
earlier
i
will
work
with
the
assumption
that
the
messaging
backbone
of
the
eda
will
be
an
enterprise
service
bus
esb
or
equivalent
taylor
eventdriven
productivity
infrastructure
assembling
the
paradigmatic
eda
to
get
to
the
paradigmatic
eda
the
one
i
will
use
as
the
reference
point
for
the
rest
of
this
paper
involves
connecting
event
producers
event
listeners
event
processors
and
event
reactions
using
a
common
messaging
backbone
figure
shows
what
this
looks
like
in
the
plainest
terms
obviously
things
can
get
wildly
more
complex
in
real
life
but
i
thought
it
would
be
best
to
start
with
a
very
stripped
down
paradigm
example
to
start
message
flow
state
a
state
b
event
producer
event
listener
event
processor
event
reaction
event
messaging
backbone
figure
the
paradigmatic
eda
consisting
of
event
producer
event
listener
event
processor
and
event
reaction
all
connected
through
a
common
messaging
backbone
like
an
enterprise
nervous
system
the
eda
works
as
a
whole
taking
in
signal
inputs
in
the
form
of
event
data
processing
it
and
reacting
to
it
based
on
some
kind
of
intelligent
model
like
the
nerve
endings
that
tell
us
when
we
are
hot
or
cold
being
touched
or
falling
through
the
air
event
listeners
in
the
eda
quantify
information
from
the
world
and
order
it
into
a
form
that
the
eda
can
understand
the
messaging
backbone
of
the
eda
is
like
the
nerve
cells
themselves
transmitting
signals
back
and
forth
from
various
places
in
the
body
and
toward
the
brain
the
brain
is
like
the
edas
event
processing
components
it
takes
in
event
data
and
decides
how
to
respond
to
it
the
event
reaction
components
are
like
our
limbs
based
on
the
input
we
take
action
or
not
the
flavors
of
eda
theres
an
old
joke
about
las
vegas
where
a
guy
wants
to
be
seated
at
a
restaurant
and
is
asked
which
section
would
you
prefer
smoking
or
chain
smoking
eda
is
the
same
almost
every
system
has
some
degree
of
event
orientation
in
it
after
all
computing
is
essentially
a
matter
of
input
processing
and
output
much
like
an
eda
following
from
this
discussions
of
what
an
eda
actually
looks
like
can
be
confusing
because
they
tend
to
get
overly
broad
and
encompass
well
just
about
everything
the
it
universe
to
keep
our
focus
lets
look
at
several
prime
models
of
eda
that
are
in
use
today
according
to
manas
deb
there
are
two
essential
types
of
eda
explicit
and
implicit
in
an
explicit
eda
the
event
publishers
send
event
data
to
known
event
listeners
perhaps
even
by
direct
hard
coding
of
the
event
listener
destination
right
into
the
event
producer
most
current
implementations
of
eda
are
either
partly
or
wholly
explicit
as
such
they
tend
to
rely
on
tight
coupling
of
event
producers
and
event
listeners
in
contrast
an
implicit
eda
does
not
specify
any
dedicated
connections
between
event
producers
and
event
listeners
the
event
listeners
or
the
event
processors
even
may
determine
the
events
to
which
they
want
to
listen
the
coupling
between
the
event
producers
and
listeners
will
be
loose
or
even
completely
decoupled
in
an
implicit
eda
as
you
might
imagine
an
implicit
eda
is
more
flexible
and
dynamic
than
an
explicit
eda
historically
they
have
proved
deb
manas
eda
and
event
processing
essentials
visual
studio
magazine
taylor
eventdriven
productivity
infrastructure
too
complex
to
implement
this
is
beginning
to
change
with
the
advent
and
adoption
of
open
standards
within
edas
themselves
there
are
three
basic
patterns
simple
event
processing
event
stream
processing
and
complex
event
processing
which
is
known
as
cep
in
simple
event
processing
the
eda
is
quite
narrow
and
simple
the
event
producers
function
is
to
generate
event
data
and
send
it
to
the
event
listener
which
in
turn
processes
it
in
whatever
manner
is
required
the
thermostat
example
is
emblematic
of
a
simple
event
processing
design
the
furnace
gets
the
signal
and
switches
on
or
off
and
thats
about
it
event
stream
processing
involves
event
processors
receiving
a
number
of
signals
from
event
producers
via
the
event
listeners
but
only
reacting
when
certain
criteria
are
met
for
example
the
thermometer
may
send
the
temperature
data
every
two
seconds
but
the
event
processor
thermostat
ignores
all
but
the
relevant
switch
on
data
point
which
activates
the
furnace
only
when
it
is
observed
complex
event
processing
cep
takes
the
eda
to
another
level
but
enabling
it
to
react
to
multiple
events
under
multiple
logical
conditions
so
for
the
sake
of
argument
lets
say
that
we
only
want
to
buy
us
treasury
bonds
when
the
nikkei
hits
a
certain
number
and
unemployment
figures
dip
below
the
cep
listens
to
multiple
event
streams
and
knows
how
to
correlate
them
in
a
logical
manner
according
to
the
objectives
of
the
eda
in
other
words
the
cep
starts
to
think
like
a
person
taking
in
data
from
unrelated
sources
on
the
fly
differentiating
between
useful
and
useless
information
and
acting
accordingly
this
is
the
ideal
of
the
complex
implicit
dynamic
eda
the
often
inadequate
human
link
in
the
eda
there
are
many
instances
where
the
corporate
nervous
system
of
eda
loops
through
a
human
decision
making
process
in
the
airline
traffic
case
it
was
the
flight
operations
managers
who
were
called
upon
to
make
critical
decisions
about
flight
prioritization
based
on
input
from
the
eda
in
the
antimoney
laundering
case
bank
fraud
staff
were
fed
information
about
suspicious
transactions
for
their
review
and
decision
on
actions
this
edahuman
connection
makes
sense
much
of
the
time
indeed
there
is
often
no
substitute
for
a
person
and
his
or
her
awareness
of
multiple
influencing
factors
in
a
business
decision
making
process
artificial
intelligence
is
suitable
in
some
cases
to
make
or
support
human
decisions
but
even
in
cases
where
decision
making
can
be
automated
there
is
frequently
the
need
for
a
person
to
take
responsibility
for
the
decision
alas
there
is
still
no
way
to
hold
a
computer
accountable
for
the
consequences
of
a
decision
that
causes
an
airliner
to
crash
or
money
to
be
stolen
from
a
bank
account
given
the
inevitable
presence
of
people
in
edabased
decision
process
flows
one
of
the
big
challenges
is
relative
inefficiency
of
human
decision
making
unlike
computers
people
are
extraordinarily
inefficient
at
decision
making
and
are
in
fact
quite
high
maintenance
while
a
computer
can
execute
a
decision
algorithm
at
any
time
within
a
fraction
of
a
second
people
need
to
be
present
awake
and
focused
to
make
a
specific
decision
at
a
specific
time
this
is
not
efficient
and
in
some
cases
may
be
harmful
to
the
business
process
that
the
eda
is
meant
to
serve
and
in
many
cases
people
need
to
make
decisions
in
groups
a
situation
where
the
inefficiency
of
communication
compounds
the
delay
and
quality
of
the
decision
for
example
if
the
air
traffic
eda
enables
rapid
decisions
about
prioritizing
flight
departure
times
but
the
key
decision
maker
needs
to
consult
with
a
superior
who
is
out
to
lunch
the
whole
process
could
be
delayed
to
the
point
where
it
compromises
the
whole
intent
of
the
system
taylor
eventdriven
productivity
infrastructure
in
other
cases
people
may
need
to
access
external
sources
of
information
in
order
to
make
decisions
that
feed
into
an
eda
decision
making
process
the
bank
antifraud
staffer
may
have
to
review
scanned
document
images
to
compare
signatures
on
old
checks
before
making
a
judgment
call
about
whether
to
escalate
a
fraud
investigation
or
notify
law
enforcement
this
type
of
manual
or
semimanual
process
can
cause
harmful
inefficiency
for
the
eda
in
this
instance
the
antifraud
staffer
might
have
to
manually
write
down
the
name
of
the
suspected
account
exit
the
eda
interface
open
a
records
management
application
and
conduct
a
search
for
matching
documents
after
manually
reviewing
the
documents
he
or
she
may
have
to
share
the
findings
with
other
antifraud
staffers
or
document
review
specialists
before
making
a
decision
to
escalate
the
case
such
a
discussion
could
involve
a
combination
of
email
phone
fax
or
instant
messaging
none
of
this
is
particularly
horrible
but
the
cumulative
effect
of
faults
in
the
communication
and
manual
process
flows
spread
out
across
multiple
concurrent
fraud
cases
can
result
in
a
significant
drag
on
performance
and
suboptimal
antifraud
efforts
the
solution
to
these
types
of
challenges
is
known
broadly
as
productivity
infrastructure
and
it
is
maturing
today
at
a
rapid
rate
overview
of
productivity
infrastructure
productivity
infrastructure
pi
is
an
umbrella
term
to
describe
peoples
and
organizations
increasingly
connected
and
synergistic
use
of
phone
email
internet
pda
intranet
extranet
and
desktop
productivity
applications
what
was
once
a
collection
of
essentially
siloed
productivity
technologies
and
work
flows
phone
calls
emails
searching
the
web
creating
documents
using
a
pda
and
so
on
are
now
merging
into
a
combined
infrastructure
that
drives
personal
and
organization
productivity
in
brand
name
terms
productivity
infrastructure
is
integrating
the
functionality
of
product
sets
such
as
microsofts
office
system
ciscos
voip
solutions
ibms
lotus
suite
and
googles
docs
and
gmail
services
just
to
name
a
few
to
understand
the
importance
and
impact
of
productivity
infrastructure
lets
use
the
creation
of
a
sales
proposal
as
a
baseline
example
of
the
kind
of
unstructured
type
of
workflow
that
typically
challenges
information
workers
to
be
productive
in
contrast
to
structured
tasks
such
as
those
performed
by
customer
service
agents
at
a
call
center
a
great
deal
of
business
work
today
involves
unstructured
tasks
which
are
unpredictable
in
terms
of
work
flow
step
order
location
of
needed
information
and
stakeholder
identities
roles
and
responsibilities
in
the
case
of
creating
a
sales
proposal
there
may
be
a
number
of
different
approval
patterns
issues
to
be
resolved
and
decision
makers
involved
at
any
given
time
the
processes
people
and
underlying
data
and
documents
required
to
create
the
sales
proposal
may
change
from
case
to
case
though
the
process
will
contain
the
basic
flow
shown
in
figure
in
reality
each
situation
will
be
slightly
different
managing
this
subjectivity
within
a
tight
time
frame
is
the
essence
of
productivity
infrastructure
taylor
eventdriven
productivity
infrastructure
sales
team
get
requirements
from
client
estimator
create
sales
proposal
get
requirements
from
sales
team
and
create
cost
estimate
get
estimate
and
draft
proposal
submit
proposal
to
sales
executive
for
approval
finalize
proposal
and
submit
to
client
legal
review
proposal
and
provide
legal
changes
sales
production
executive
client
revise
proposal
and
submit
to
legal
work
with
estimator
to
assure
cost
and
schedule
accuracy
review
proposal
and
give
feedback
to
sales
team
meet
with
sales
team
and
describe
requirements
acceptreject
request
modification
to
proposal
figure
in
the
process
flow
of
creating
a
sales
proposal
multiple
people
and
groups
must
collaborate
and
share
documents
and
information
often
in
real
time
each
step
in
the
creation
of
the
sales
proposal
as
shown
in
figure
involves
multiple
people
often
from
different
work
teams
in
the
sharing
of
information
documents
and
knowledge
the
more
efficiently
the
people
involved
in
completing
this
multistep
multiplayer
process
can
work
get
their
work
done
the
better
off
the
organization
will
be
in
productivity
terms
the
impetus
behind
the
development
of
productivity
infrastructure
is
the
drive
to
enable
workers
in
unstructured
information
work
to
get
more
done
in
less
time
with
less
expenditure
of
resources
as
figure
shows
the
steps
in
the
sales
proposal
development
process
map
to
capabilities
in
the
productivity
infrastructure
in
this
example
voip
technology
speeds
up
the
process
of
connecting
the
customer
with
the
sales
rep
by
automatically
connecting
a
landline
call
to
a
mobile
device
all
participants
in
the
process
use
email
to
communicate
with
relevant
stakeholders
able
to
share
links
to
document
repositories
where
proposal
templates
and
other
data
are
stored
for
common
use
a
portal
ui
links
stakeholders
to
the
workflow
management
process
as
well
as
collaboration
sites
that
contain
blogs
and
wikis
that
publish
up
to
date
information
needed
for
crafting
the
proposal
social
computing
technologies
allows
individuals
to
understand
connections
between
stakeholders
that
may
not
be
apparent
through
job
titles
or
task
assignments
team
sites
enable
stakeholders
to
make
sure
that
their
proposal
is
in
alignment
with
team
objectives
and
business
goals
or
clarify
approvals
required
for
the
proposal
the
capability
to
see
presence
enables
real
time
instant
messaging
or
web
conferencing
that
facilitates
rapid
resolution
of
open
issues
for
the
proposal
taylor
eventdriven
productivity
infrastructure
name
title
name
title
as
users
name
title
portal
ui
personal
productivity
apps
word
excel
users
team
title
identity
access
management
document
workflow
approvals
multimedia
messaging
presence
im
download
propsal
template
im
session
voice
call
collaboration
suiteblogswikis
productivity
infrastructure
voip
email
enterprise
search
document
archive
mobile
webvoice
access
team
sites
mysites
social
computing
submit
proposal
for
approval
email
estimator
sales
team
create
sales
proposal
get
requirements
from
client
get
estimate
and
draft
proposal
submit
proposal
to
sales
executive
for
approval
revise
proposal
and
submit
to
legal
finalize
proposal
and
submit
to
client
get
requirements
from
sales
team
and
create
cost
estimate
figure
productivity
infrastructure
which
links
workflow
collaboration
email
phone
mobile
document
repositories
and
web
technologies
such
as
blogs
wikis
mysites
and
social
computing
can
drive
efficiencies
in
the
unstructured
multiplayer
iterative
process
flow
required
to
create
a
sales
proposal
if
everyone
involved
in
creating
the
sales
proposal
were
sitting
in
the
same
room
at
all
times
then
there
would
be
no
reason
for
the
investment
in
productivity
infrastructure
in
fact
thats
how
business
worked
until
about
when
the
telephone
started
to
move
people
away
from
physical
proximity
to
their
business
partners
today
of
course
the
groups
of
people
involved
in
getting
business
processes
accomplished
are
almost
never
all
together
and
certainly
not
in
any
reliable
pattern
or
schedule
that
will
allow
them
to
get
time
sensitive
tasks
done
and
today
as
we
often
find
its
not
just
being
able
to
communicate
with
others
in
a
collaborative
process
that
makes
things
flow
smoothly
to
get
the
tasks
accomplished
each
participant
needs
to
know
who
the
other
players
are
who
they
report
to
what
their
priorities
are
on
top
of
all
that
participants
also
often
need
access
to
information
that
is
not
easily
located
without
the
assistance
of
others
in
the
group
to
make
access
to
needed
information
available
without
requiring
time
consuming
conversations
or
emails
participants
need
to
be
able
to
search
for
and
find
what
they
are
looking
for
on
their
own
productivity
infrastructure
has
the
potential
to
drive
more
efficient
work
flows
for
unstructured
tasks
assuming
it
is
implemented
properly
the
time
cycle
for
completing
the
entire
process
flow
for
creating
a
sales
proposal
for
example
becomes
shorter
with
good
productivity
infrastructure
and
the
time
investment
of
each
participant
goes
down
as
well
ideally
the
accuracy
and
quality
of
the
final
product
improves
as
an
added
bonus
however
productivity
infrastructure
can
be
complex
to
deploy
as
it
can
raise
some
odd
security
and
compliance
concerns
i
mention
this
here
just
to
assure
you
that
i
am
not
all
starryeyed
about
the
ease
of
deploying
such
a
comprehensive
and
interconnected
infrastructure
and
neither
should
you
nevertheless
i
do
believe
that
productivity
infrastructure
once
in
place
has
portent
for
eda
taylor
eventdriven
productivity
infrastructure
the
potential
benefits
of
edapi
integration
to
see
the
potential
for
benefits
of
integrating
eda
with
pi
we
should
think
about
the
advantages
of
linking
the
corporate
nervous
system
of
eda
with
the
comparable
organizational
nervous
system
of
pi
with
eda
corporate
systems
can
detect
changes
in
state
that
affect
business
wherever
the
eda
needs
human
input
pi
can
speed
up
the
edas
reaction
time
to
the
state
change
pi
can
also
improve
the
quality
of
the
human
input
because
it
can
link
people
with
data
sources
and
each
other
with
high
efficiency
ultimately
there
is
the
potential
for
the
creation
of
loops
of
interaction
between
eda
and
pi
where
state
changes
noticed
by
the
eda
elicit
reactions
from
people
though
the
pi
who
in
turn
input
their
own
changes
of
state
to
the
eda
name
title
name
as
title
name
title
users
portal
ui
personal
productivity
apps
word
excel
users
multimedia
messaging
email
identity
access
management
document
workflow
approvals
portal
server
presence
im
process
app
a
data
with
app
b
data
collaboration
suiteblogswikis
productivity
infrastructure
pi
voip
input
from
app
a
enterprise
search
document
archive
mobile
webvoice
access
team
title
team
sites
mysites
social
computing
evaluate
data
instruct
app
c
event
listener
business
process
modeling
bpm
event
web
services
eventdriven
architecture
eda
enterprise
service
bus
esb
event
web
services
event
web
services
event
listener
enterprise
app
a
enterprise
app
b
enterprise
app
c
figure
the
integration
of
productivity
infrastructure
and
eda
connecting
people
and
enterprise
apps
through
an
esb
and
event
web
services
as
shown
in
figure
the
integration
of
productivity
infrastructure
and
eda
can
be
understood
by
considering
a
simple
business
process
model
that
involves
inputs
from
two
enterprise
systems
that
must
be
evaluated
by
people
event
web
services
on
applications
a
and
b
publish
data
about
their
state
to
the
esb
and
on
to
an
application
built
using
a
business
process
modeling
bpm
tool
the
process
model
calls
for
people
to
assess
the
data
presented
by
taylor
eventdriven
productivity
infrastructure
the
states
of
applications
and
b
and
for
them
to
make
a
decision
about
what
the
states
mean
and
then
take
action
either
by
instructing
application
c
or
terminating
the
process
without
taking
action
the
pi
is
designed
to
notify
the
decision
makers
of
the
change
in
state
once
the
decision
is
made
the
reaction
to
the
change
in
state
flows
back
to
the
eda
through
an
event
web
service
located
in
the
pi
if
there
were
just
one
person
who
could
make
the
decision
called
for
in
the
process
off
the
top
of
his
or
her
head
there
wouldnt
be
much
need
for
the
kind
of
elaborate
setup
called
for
in
figure
however
lets
suppose
that
the
decision
being
made
in
the
process
flow
is
complex
high
risk
multistakeholder
and
time
sensitive
imagine
for
example
that
it
involves
the
decision
to
manufacture
goods
with
costly
inventory
the
decision
could
have
impact
on
financial
statements
factory
capacity
even
labor
unions
in
that
kind
of
situation
a
tight
integration
between
the
decision
makers
and
the
eda
could
have
a
real
impact
on
the
business
in
the
case
of
a
manufacturer
setting
inventory
levels
the
time
required
to
make
a
decision
the
right
decision
that
is
is
highly
relevant
to
business
success
if
the
manufacturer
guesses
wrong
and
either
overstocks
an
item
whose
product
life
is
on
the
decline
or
under
stocks
a
hot
seller
the
financial
results
will
be
less
than
optimal
in
these
kind
of
situations
even
the
difference
of
an
hour
or
two
or
the
lack
of
a
few
critical
nuggets
of
business
data
can
have
an
impact
on
the
bottom
line
imagine
for
instance
if
you
decided
to
order
a
truckload
of
component
parts
for
the
manufacture
of
a
product
that
was
later
determined
to
be
unneeded
it
might
not
be
the
end
of
the
world
but
it
would
create
an
accounting
and
logistical
hassle
to
return
the
order
multiply
this
type
of
problem
across
a
large
global
company
and
the
effect
on
earnings
could
reach
into
millions
of
dollars
of
direct
and
indirect
costs
consider
for
example
the
necessity
of
engaging
accounting
staff
unnecessarily
due
to
faulty
decision
making
this
in
addition
to
offering
a
shorter
decision
cycle
time
the
integrated
edapi
approach
has
the
potential
to
enable
a
higher
quality
of
decision
than
the
current
state
of
integration
between
pi
and
enterprise
systems
keeping
in
mind
with
this
example
that
we
are
dealing
here
with
decisions
that
cannot
be
automated
through
rules
engines
consider
the
factors
that
affect
the
quality
of
decision
making
amongst
multiple
stakeholders
in
our
view
the
quality
of
a
decision
depends
on
the
financial
consequences
of
the
decision
the
decision
that
saves
or
makes
the
most
money
is
the
best
one
of
course
there
is
a
range
of
quality
decisions
between
best
and
worst
but
the
goal
should
be
to
strive
for
the
best
decision
in
the
largest
number
of
cases
this
concept
is
known
as
the
decision
yield
as
anyone
who
has
worked
in
a
large
distributed
organization
could
tell
you
the
quality
of
a
decision
depends
on
multiple
interdependent
factors
including
knowledge
of
who
the
stakeholders
are
for
a
particular
decision
equal
simultaneous
access
to
information
and
equal
understanding
of
information
quality
of
decision
making
also
depends
on
a
productive
engagement
of
stakeholders
inside
an
organizational
hierarchy
the
higher
level
stakeholder
may
have
the
ability
to
overrule
the
correct
decision
through
innate
power
and
the
smarter
subordinate
may
not
have
or
want
the
opportunity
to
oppose
the
incorrect
decision
of
course
productivity
infrastructure
cannot
help
an
organization
overcome
this
hierarchical
flaw
in
process
on
its
own
however
by
providing
open
access
to
shared
opinions
and
corporate
knowledge
and
real
time
access
to
multiple
points
of
view
the
hierarchy
effect
can
be
mitigated
in
favor
of
discussion
and
group
learning
integrating
eda
and
pi
can
improve
the
efficiency
of
the
information
workers
who
are
tasked
with
making
business
decisions
ultimately
this
can
result
in
reductions
in
overhead
or
increased
utilization
of
staff
for
strategic
business
purposes
i
felt
this
point
was
worth
making
because
i
have
heard
many
dialogues
about
the
value
of
soa
and
eda
that
make
the
assumption
that
there
is
a
high
efficiency
analysis
apparatus
available
to
parse
the
output
of
these
systems
taylor
james
and
raden
neil
smart
enough
systems
prentice
hall
taylor
eventdriven
productivity
infrastructure
this
is
not
necessarily
so
and
indeed
a
lot
of
approaches
to
soa
dead
end
into
an
empty
seat
called
stakeholders
and
fail
to
generate
good
roi
as
a
result
the
productivity
infrastructure
itself
can
function
as
an
event
producer
as
well
a
simple
example
might
be
the
presence
of
a
stakeholder
being
announced
as
an
event
another
example
which
touches
on
an
exciting
new
area
of
pi
is
the
concept
of
active
search
within
the
enterprise
and
its
potential
to
function
as
an
event
producer
from
within
the
pi
name
title
name
as
title
name
title
users
portal
ui
personal
productivity
apps
word
excel
users
mobile
webvoice
access
portal
server
team
title
team
sites
mysites
social
computing
collaboration
suiteblogswikis
productivity
infrastructure
pi
identity
access
management
voip
presence
im
multimedia
messaging
event
listener
enterprise
search
email
document
workflow
approvals
eda
apps
esb
enterprise
search
index
eda
apps
preset
query
crawler
shared
drives
crawler
enterprise
app
data
store
crawler
query
server
database
document
archive
index
server
eda
apps
eda
apps
rss
feed
event
producer
crawler
figure
active
search
involves
the
use
of
an
enterprise
search
solution
which
crawls
repositories
of
unstructured
data
indexes
them
and
then
sends
rss
feeds
in
response
to
preset
search
queries
the
rss
feeds
which
function
to
indicate
the
presence
of
specific
information
in
unstructured
data
can
serve
as
event
producers
figure
depicts
an
enterprise
search
solution
allowing
a
productivity
infrastructure
to
function
as
an
event
producer
to
see
how
this
works
we
must
first
understand
the
process
of
an
enterprise
search
solution
which
is
an
increasingly
common
fixture
in
todays
enterprises
like
a
web
search
engine
the
enterprise
search
solution
contains
three
core
elements
a
query
server
an
index
server
and
crawlers
which
read
through
documents
and
other
data
sources
and
feed
their
findings
into
the
index
server
the
enterprise
search
index
like
their
corollaries
in
the
web
search
world
is
a
massive
and
exhaustive
directory
of
information
located
within
the
enterprise
the
enterprise
search
solution
operates
by
taking
queries
from
end
users
through
a
front
end
ui
eg
a
search
box
in
a
portal
interface
sending
the
queries
through
the
query
server
to
the
index
and
returning
matching
results
back
to
the
end
user
through
the
ui
taylor
eventdriven
productivity
infrastructure
some
enterprise
search
solutions
offer
the
ability
to
conduct
active
search
a
process
wherein
certain
queries
are
stored
and
continually
rerun
with
the
search
results
being
published
to
end
users
through
rss
real
simple
syndication
a
form
of
xml
so
for
example
an
end
user
in
a
real
estate
development
firm
could
use
an
enterprise
search
solution
to
query
the
companys
internal
document
libraries
for
a
data
that
matches
the
keyword
of
a
particular
neighborhood
if
the
user
types
chelsea
into
the
search
box
on
the
portal
ui
that
query
will
return
any
documents
or
other
indexed
data
files
that
contain
the
word
chelsea
and
the
user
could
then
learn
about
projects
or
people
involving
chelsea
in
an
active
search
mode
the
user
could
store
the
chelsea
search
and
instruct
the
search
solution
to
issue
him
an
rss
feed
every
day
that
contained
the
latest
search
results
for
chelsea
without
the
user
having
to
run
the
query
every
day
himself
from
an
eda
perspective
it
is
possible
to
imagine
how
this
active
search
function
could
turn
into
an
event
producer
the
stored
query
and
resulting
rss
feed
could
be
designed
to
publish
changes
in
state
that
exist
within
unstructured
data
environments
in
our
real
estate
example
the
query
might
feed
into
an
algorithm
that
determines
whether
specific
people
or
company
divisions
are
working
in
chelsea
a
change
in
state
that
could
drive
action
through
the
eda
a
crm
system
attached
to
the
eda
could
flag
the
activity
in
chelsea
based
on
the
event
data
published
through
the
enterprise
search
solution
and
pi
for
follow
up
by
account
executives
in
the
neighborhood
there
is
even
the
potential
for
eda
and
pi
to
inter
operate
as
looping
connected
halves
of
a
bigger
eda
events
published
out
through
the
eda
inform
stakeholders
and
drive
action
through
the
pi
which
in
turn
publishes
back
event
data
about
stakeholder
activities
presence
and
data
creation
through
the
pi
admittedly
this
level
of
sophistication
is
fairly
futuristic
even
for
this
forward
looking
paper
however
i
believe
the
potential
for
productivity
improvements
and
information
worker
empowerment
through
the
integration
of
eda
and
pi
are
powerful
and
promising
prodco
an
edapi
integration
scenario
to
see
how
eda
and
pi
could
be
integrated
i
will
use
the
example
of
a
custom
manufacturing
business
in
order
to
optimize
the
learning
experience
w
are
going
to
keep
the
example
fairly
simple
and
focus
on
the
aspects
of
this
hypothetical
business
that
are
most
general
to
all
businesses
this
company
which
ill
call
prodco
could
stand
in
for
a
mass
of
businesses
that
perform
custom
services
on
a
jobbyjob
basis
within
prodco
i
will
focus
on
the
sales
proposal
and
order
fulfillment
process
to
highlight
the
potential
edapi
integration
sales
proposal
and
order
fulfillment
at
prodco
the
sales
and
fulfillment
process
at
prodco
is
touched
by
a
group
of
teams
and
individual
stakeholders
to
get
a
proposal
out
to
a
client
and
then
fulfill
on
the
order
the
sales
marketing
production
legal
finance
and
csuite
executives
need
to
be
involved
sales
of
course
is
the
main
point
of
contact
with
the
client
marketing
engages
in
the
process
to
assist
with
pricing
and
discount
programs
that
may
be
tied
to
particular
campaigns
finance
is
involved
to
assure
that
the
pricing
and
costing
of
the
job
are
appropriate
and
that
the
hr
aspects
of
the
job
are
properly
taylor
eventdriven
productivity
infrastructure
considered
finance
also
weighs
in
with
sourcing
decisions
and
execution
production
is
responsible
for
actually
doing
the
work
the
csuite
has
oversight
especially
if
the
job
is
large
or
strategically
significant
figure
shows
the
essential
flow
for
prodcos
proposalfulfillmentassessment
process
the
sales
team
drafts
the
proposal
and
circulates
it
through
reviews
by
legal
production
finance
and
the
csuite
if
there
are
revisions
the
review
cycle
may
repeat
in
whole
or
part
once
the
client
approves
the
proposal
the
job
goes
into
production
and
is
fulfilled
finance
becomes
involved
again
for
sourcing
of
materials
and
overseeing
labor
expenses
as
well
as
invoicing
and
collection
at
the
end
of
the
process
flow
the
finance
department
publishes
the
results
of
the
job
if
it
made
or
lost
money
compared
to
the
estimate
and
all
other
departments
receive
this
information
and
update
their
own
knowledge
bases
or
not
proposal
through
fulfillment
and
assessment
draft
proposal
proposal
review
revise
fulfillment
send
to
client
accepted
assessment
learning
for
next
time
update
knowledge
base
on
reasons
for
loss
match
proposal
to
sales
discount
programs
learning
for
next
time
legal
legal
review
production
production
feasibility
review
produce
order
finance
hr
provide
compete
data
finance
review
purchasing
billing
labor
csuite
marketing
sales
proposal
clevel
review
selective
learning
for
next
time
deliver
assess
profit
loss
learning
for
next
time
publish
knowledge
of
job
results
learning
for
next
time
figure
prodcos
process
flow
for
creating
a
sales
proposal
fulfilling
the
job
and
assessing
its
profitability
there
are
a
couple
of
flaws
in
this
process
design
though
to
be
fair
to
prodco
its
about
as
good
as
it
can
be
given
the
current
state
of
technology
for
one
thing
the
review
loops
for
the
proposal
may
be
a
lot
more
complicated
and
subjective
than
any
process
model
can
approximate
and
the
assumption
that
the
process
flow
makes
is
that
everyone
has
access
to
relevant
information
on
a
timely
basis
the
marketing
department
may
not
know
for
example
that
certain
types
of
projects
lose
money
so
they
ought
to
be
dropped
from
the
discount
plan
and
so
forth
most
problematic
though
is
that
the
process
is
very
inefficient
the
people
and
groups
involved
in
this
process
waste
time
managing
and
finding
the
information
they
need
to
get
the
process
finished
as
well
as
communicating
with
one
another
a
closer
look
at
the
way
prodco
has
set
up
its
productivity
software
and
enterprise
architecture
can
reveal
some
of
the
causes
of
this
inefficiency
taylor
eventdriven
productivity
infrastructure
prod
cos
current
productivity
tools
figure
shows
how
prodco
has
set
up
its
productivity
tools
and
enterprise
applications
the
sales
and
marketing
teams
have
access
to
the
crm
system
while
finance
and
production
use
the
erp
solution
collaboration
inside
each
team
and
between
teams
is
a
fairly
adhoc
affair
with
stakeholders
emailing
files
back
and
forth
and
saving
them
on
departmental
shared
drives
that
each
team
can
access
through
a
portal
interface
it
is
possible
for
a
non
teammember
to
access
a
portal
but
that
person
must
first
be
granted
access
rights
by
a
departmental
administrator
each
team
portal
has
calendaring
capabilities
and
everyone
is
able
to
schedule
meeting
the
email
suite
the
csuite
executives
use
a
business
intelligence
dashboard
that
is
fed
by
the
finance
staff
because
it
does
not
tie
directly
into
the
erp
system
sales
communication
infrastructure
mobile
webvoice
access
pcs
finance
production
pcs
csuite
legal
pcs
pcs
pcs
mobile
webvoice
access
finance
portal
crm
shared
drive
legal
portal
bi
dashboard
server
shared
drive
marketing
portal
production
portal
shared
drive
email
shared
drive
pbx
pcs
marketing
erpfinance
figure
the
prodco
teams
involved
in
creating
sales
proposals
and
fulfilling
orders
use
two
enterprise
systems
crm
and
erp
and
a
slew
of
adhoc
productivity
solutions
including
share
drives
email
and
voice
communication
prodcos
productivity
solutions
and
enterprise
applications
are
too
siloed
to
be
highly
efficient
there
is
no
efficient
way
to
share
information
or
documents
across
the
entire
company
at
least
in
a
way
that
does
not
open
access
to
the
document
to
every
single
employee
which
nobody
wants
connections
between
systems
are
haphazard
or
nonexistent
so
for
example
there
is
no
way
to
seamlessly
import
the
terms
of
a
sales
proposal
into
the
erp
system
it
must
be
reentered
when
the
order
goes
into
production
approvals
on
each
phase
of
a
proposal
and
its
subsequent
production
phase
are
conducted
by
email
and
phone
the
erp
system
does
have
automated
approval
functions
where
executives
can
sign
off
on
purchase
orders
overtime
schedules
and
so
forth
however
the
problem
is
that
these
approvers
must
often
communicate
with
others
such
as
the
legal
department
before
proceeding
the
efficiency
of
the
automated
approval
function
is
mitigated
by
the
slow
unstructured
process
of
communication
within
the
firm
and
there
is
no
way
to
keep
track
of
recurring
patterns
of
unstructured
workflow
that
could
save
time
in
the
future
for
example
imagine
that
certain
types
of
orders
require
materials
to
be
sourced
from
mexico
the
procurement
staff
has
learned
from
experience
that
in
the
summer
months
the
heat
inside
the
trucks
coming
from
mexico
is
so
intense
that
it
can
ruin
the
parts
in
transit
they
know
now
either
to
order
these
parts
in
advance
or
actually
pay
for
a
refrigerated
truck
of
course
this
is
more
expensive
though
paying
the
expense
is
preferable
to
delays
and
missing
parts
however
the
procurement
staff
has
no
way
to
keep
this
relevant
fact
in
front
of
all
stakeholders
at
all
times
taylor
eventdriven
productivity
infrastructure
the
erp
system
has
a
notes
section
where
the
procurement
staff
can
write
down
a
reminder
to
order
a
refrigerated
truck
with
that
sku
yet
when
the
sales
team
wants
to
make
a
deal
or
the
marketing
department
wants
to
create
a
discount
campaign
they
do
so
without
realizing
that
their
margin
is
lower
than
normal
on
the
item
that
includes
the
mexican
components
the
csuite
too
may
lack
visibility
into
the
issue
and
wonder
why
margins
are
low
on
this
type
of
product
prodcos
proposed
eda
being
wise
and
forwardlooking
prodco
has
decided
to
invest
in
shifting
its
architecture
towards
soa
and
eda
figure
shows
how
this
would
work
prodco
would
install
an
enterprise
service
bus
as
an
integration
layer
that
exposes
the
functionality
of
both
the
crm
and
erp
systems
as
sets
of
web
services
a
portal
server
would
provide
access
to
the
various
department
portals
and
also
make
certain
crm
and
erp
functions
available
to
users
who
didnt
have
access
to
either
the
crm
or
erp
client
the
departmental
portals
themselves
would
remain
essentially
untouched
though
their
provisioning
could
now
be
centrally
controlled
and
extension
of
existing
portals
could
be
governed
more
thoroughly
than
before
communications
would
remain
a
silo
sales
communication
infrastructure
pbx
pcs
marketing
mobile
webvoice
access
pcs
finance
production
pcs
csuite
legal
pcs
pcs
pcs
mobile
webvoice
access
portal
server
email
crm
marketing
portal
finance
portal
production
portal
legal
portal
shared
drive
shared
drive
shared
drive
shared
drive
esb
bi
dashboard
server
erpfinance
figure
prodco
is
considering
a
move
towards
an
soa
and
eda
where
the
crm
and
erpfinance
applications
would
be
exposed
as
web
services
through
the
enterprise
service
bus
the
departmental
portals
would
be
accessed
through
a
central
portal
server
though
their
content
and
administration
would
remain
essentially
siloed
the
communication
infrastructure
would
remain
unchanged
to
appreciate
how
the
eda
approach
would
work
for
prodco
lets
look
a
small
part
of
the
production
process
the
ordering
of
supplies
based
on
a
bill
of
materials
figure
shows
the
flow
for
the
bill
of
materials
bom
process
as
well
as
the
matchup
between
the
process
steps
and
the
web
services
enabled
in
the
eda
certain
steps
though
such
as
selecting
the
winning
bids
from
the
rfq
are
still
human
processes
and
cannot
be
fully
automated
other
steps
such
as
requesting
procurement
may
be
semiautomated
wherein
the
erp
system
does
all
the
work
once
a
person
has
approved
the
request
for
rfq
taylor
eventdriven
productivity
infrastructure
bill
of
materials
process
production
create
bom
order
received
create
bom
check
inventory
rfq
and
ordering
create
list
of
needed
materials
request
procurement
human
process
legal
finance
solicit
bids
review
bids
automated
semiautomated
event
processors
place
order
accepted
contract
crm
edaappui
erp
eda
app
ui
event
listeners
event
listeners
esb
event
web
convertorder
services
crm
neworder
createbom
checkinv
neededmat
dorfq
dopo
erpfinance
figure
prodcos
eda
exemplified
through
the
process
flow
of
creating
a
bill
of
materials
and
requesting
quotes
rfqs
from
suppliers
as
shown
in
figure
the
bill
of
materials
process
consists
of
several
automatedsemiautomated
steps
that
work
off
the
event
web
services
as
well
a
few
that
are
completely
human
sales
proposals
exist
in
the
crm
system
but
when
a
customer
makes
the
decision
to
buy
under
the
new
eda
approach
the
crm
systems
convertorder
web
service
publishes
the
state
change
of
the
proposal
from
pending
to
accepted
the
event
listener
in
the
erp
eda
application
receives
this
state
change
information
and
in
reaction
takes
the
order
data
from
the
transfers
it
into
the
erp
system
this
step
could
be
fully
automated
meaning
it
could
occur
simply
because
of
programmatic
instruction
or
it
could
be
semiautomated
where
a
person
gets
a
signal
through
the
ui
that
the
order
is
ready
to
convert
and
the
human
action
of
clicking
a
button
on
the
interface
actually
completes
the
transfer
from
crm
to
erp
systems
the
process
flow
then
follows
a
series
of
pubsub
steps
the
convertorder
web
service
in
the
crm
system
results
in
the
creation
of
a
new
order
for
production
in
the
erp
system
the
neworder
web
services
publishes
that
its
state
is
new
which
is
listened
to
by
the
createbom
create
bill
of
materials
web
service
the
web
services
checkinv
check
inventory
and
neededmat
needed
materials
create
a
list
of
materials
that
are
needed
for
the
job
but
which
are
not
in
stock
the
dorfq
web
service
is
activated
by
the
neededmat
web
services
publishing
of
its
change
of
state
from
nothing
to
list
each
of
these
web
services
can
be
invoked
manually
or
through
a
automated
process
sending
the
rfqs
out
to
vendors
though
is
a
manual
step
even
if
the
actual
work
is
done
by
the
system
a
procurement
person
should
be
active
the
process
to
make
sure
that
the
rfq
goes
to
suppliers
who
are
appropriate
for
the
materials
needed
however
even
this
could
be
a
fully
automated
process
that
reacts
to
the
event
of
dorfq
by
generating
a
request
for
quote
taylor
eventdriven
productivity
infrastructure
electronically
and
sending
it
to
preapproved
vendors
through
email
or
online
notification
calling
them
to
a
vendor
portal
assuming
the
eda
is
implemented
correctly
it
should
be
able
to
confer
some
advantages
to
prodcos
operations
it
renders
the
back
end
more
flexible
than
a
conventionally
architected
system
the
eda
makes
it
simpler
faster
and
cheaper
to
implement
changes
in
the
process
flow
for
rfqs
and
enables
streamlined
reporting
and
aggregation
of
data
for
consolidation
of
purchase
orders
and
vendor
management
the
standardsbased
interfaces
to
the
end
user
are
also
potentially
more
cost
effective
to
maintain
and
modify
as
changes
take
place
in
the
process
flow
over
time
however
the
human
decision
elements
of
the
process
flow
are
not
much
affected
by
the
eda
the
act
of
soliciting
bids
from
vendors
is
still
either
wholly
or
partly
human
as
is
the
selection
of
winning
bids
it
would
be
possible
to
automate
both
of
those
processes
though
and
even
include
some
fairly
sophisticated
rules
sets
to
assure
best
practices
in
procurement
taking
the
human
beings
out
of
the
picture
for
selecting
vendors
for
example
might
occur
if
prodco
could
implement
a
set
of
business
rules
that
awarded
contracts
to
vendors
with
the
lowest
price
the
best
ranking
for
quality
from
production
operations
and
a
consistent
track
record
of
on
time
delivery
if
this
automation
were
implemented
the
bill
of
materials
process
could
proceed
seamlessly
without
the
messiness
and
delay
of
human
actions
this
might
be
a
desirable
goal
and
it
might
even
be
possible
yet
if
we
are
realistic
and
look
at
our
own
experiences
in
corporate
life
we
will
realize
that
this
level
of
automation
is
not
practical
or
wise
returning
to
our
example
of
goods
from
mexico
that
melt
in
hot
trucks
in
the
arizona
sun
and
im
not
making
this
up
either
it
happened
to
a
colleague
of
mine
we
can
see
that
there
are
still
instances
where
there
is
a
need
for
subjective
human
knowledge
to
get
to
the
best
possible
business
result
from
a
process
flow
even
with
an
advanced
eda
in
place
and
this
is
where
the
efficiency
of
prodcos
eda
starts
to
falter
as
the
automated
or
semiautomated
process
of
converting
an
order
from
proposal
to
sale
and
the
derivative
bill
of
materialsrfq
steps
cascade
out
from
the
entry
of
the
sale
into
the
erp
system
we
still
dead
end
at
a
person
or
group
that
needs
to
decide
which
vendors
get
to
bid
on
the
order
in
the
best
case
scenario
the
vendor
selection
is
done
by
an
experienced
person
who
understands
all
the
subjective
issues
involved
and
acts
promptly
and
decisively
in
a
less
rewarding
scenario
the
decision
is
made
by
a
distributed
group
of
people
who
may
individually
lack
the
knowledge
of
the
subjective
challenges
to
getting
an
optimal
procurement
accomplished
there
are
many
scenarios
in
between
such
as
an
inexperienced
procurement
person
who
cannot
process
the
vendor
selection
quickly
due
to
lack
of
information
or
one
who
makes
the
wrong
decisions
based
on
lack
of
knowledge
or
even
a
lack
of
awareness
that
certain
types
of
knowledge
are
required
to
make
the
decision
in
this
situation
we
see
the
promotion
of
the
person
who
knows
that
one
must
request
a
refrigerated
truck
from
mexico
and
his
or
her
replacement
being
a
person
who
doesnt
have
any
idea
that
such
a
problem
exists
the
new
person
will
proceed
with
the
best
of
intentions
to
repeat
a
mistake
that
has
long
since
been
solved
there
are
several
aspects
to
this
poor
quality
decision
cycle
if
the
communication
process
that
connects
the
people
in
the
decision
loop
is
detached
from
the
eda
and
procurement
interfaces
then
the
communication
itself
risks
being
inefficient
and
inaccurate
for
example
imagine
that
the
vendor
selection
process
is
dependent
on
people
reading
long
email
threads
from
the
bottom
up
assessing
the
situation
and
making
recommendations
surely
weve
all
been
there
this
communication
pattern
is
less
than
ideal
for
rendering
a
consistent
rapid
set
of
correct
decisions
however
due
to
the
subjective
nature
of
most
unstructured
processes
such
as
selecting
a
vendor
using
group
knowledge
as
the
basis
for
the
decision
email
threading
is
probably
unavoidable
at
the
very
least
it
is
clumsy
and
unreliable
even
if
everyone
involved
is
paying
attention
and
very
well
informed
the
process
could
bog
down
if
one
or
more
taylor
eventdriven
productivity
infrastructure
participants
is
unreachable
or
unfindable
to
the
extent
that
production
orders
could
back
up
due
to
communication
breakdowns
in
the
procurement
process
prodcos
eda
also
lacks
the
capacity
to
store
organizational
knowledge
the
specialized
knowledge
about
the
subtleties
of
procurement
is
not
stored
in
a
fashion
where
stakeholders
can
easily
find
or
use
the
information
one
enterprising
person
might
create
a
procurement
best
practices
document
that
he
or
she
can
use
and
perhaps
even
share
with
others
but
if
that
document
is
lost
on
a
shared
network
drive
its
contents
may
never
reach
other
stakeholders
who
need
it
if
the
creator
of
the
document
moves
on
the
document
will
likely
disappear
a
dedicated
and
wellmanaged
procurement
team
could
also
create
an
intranet
site
on
the
portal
server
for
collection
of
practices
and
settling
of
decision
issues
this
approach
has
some
benefits
over
a
totally
uncoordinated
procurement
method
but
it
might
still
result
in
time
lags
and
communication
mistakes
if
the
stakeholders
still
need
to
toggle
back
and
forth
between
their
intranet
team
site
email
and
the
actual
erp
system
to
make
and
implement
decisions
at
the
very
least
it
is
a
largely
unrepeatable
pattern
the
integration
of
prodcos
productivity
infrastructure
with
its
eda
is
a
major
contributor
to
solving
this
dilemma
where
lost
knowledge
lack
of
knowledge
and
poor
communication
mitigates
the
positive
impact
of
an
eda
and
improvement
business
process
management
pi
integration
cannot
solve
this
problem
all
by
itself
of
course
there
are
myriad
challenges
related
to
training
knowledge
preservation
best
practices
documentation
and
so
forth
that
are
required
to
assure
good
human
decision
cycles
in
a
process
flow
however
the
chances
of
prodco
attaining
the
best
human
decisions
in
the
eda
environment
are
greatly
enhanced
by
the
integration
of
the
eda
and
the
pi
without
this
integration
the
likelihood
that
prodco
will
optimize
the
organizational
impact
of
the
eda
are
slight
a
better
proposal
edapi
integration
i
may
be
displaying
some
hubris
by
characterizing
edapi
integration
as
a
better
proposal
the
truth
is
its
a
very
new
area
and
still
quite
theoretical
even
more
so
than
eda
which
is
itself
somewhat
more
of
a
vision
than
a
reality
however
as
we
go
through
the
potentialities
of
edapi
integration
in
the
prodco
case
i
think
you
will
see
some
exciting
possibilities
for
improving
the
way
work
gets
done
in
practical
terms
unstructured
tasks
such
as
procurement
staffers
rounding
up
best
practices
data
from
diverse
stakeholders
tend
to
be
messy
and
unpredictable
given
that
reality
it
is
challenging
to
design
any
kind
of
technological
solution
that
will
consistently
solve
the
problem
and
make
the
unstructured
tasks
faster
simpler
and
cheaper
to
execute
in
fact
there
really
isnt
much
in
the
way
of
standard
language
or
practice
to
even
describe
the
kind
of
problems
that
it
solutions
need
to
solve
for
unstructured
tasks
for
this
reason
i
am
going
to
attempt
to
work
backwards
from
identification
of
unstructured
task
problems
to
causes
that
can
be
remedied
by
edapi
integration
and
build
a
solution
approach
from
there
first
what
problems
does
prodco
face
with
procurement
and
which
can
be
traced
back
to
inefficient
unstructured
tasks
and
poor
eda
integration
wasting
of
time
ranks
high
on
the
list
because
slower
procurement
typically
translates
into
slower
production
then
there
is
the
loss
of
knowledge
over
time
which
can
result
in
slow
procurement
or
other
costly
errors
in
production
then
there
are
just
plain
mistakes
made
through
poor
communication
or
inadequate
decision
making
processes
backing
out
of
these
problems
we
can
get
to
a
set
of
business
objectives
for
the
integrated
edapi
prodco
needs
to
have
rapid
procurement
that
is
accurate
they
need
high
quality
and
consistent
knowledge
transfer
as
team
members
move
in
and
out
of
roles
and
they
need
taylor
eventdriven
productivity
infrastructure
transparent
welldocumented
decision
processes
that
result
in
accurate
timely
procurement
without
imposing
an
undue
administrative
burden
this
last
point
is
relevant
because
it
is
almost
always
possible
to
cure
a
process
by
larding
it
up
with
many
onerous
administrative
tasks
and
parameters
the
net
effect
though
is
usually
counter
to
the
goal
of
efficiency
getting
the
right
process
in
place
without
choking
the
team
members
with
bureaucracy
is
a
fine
balancing
act
bill
of
materials
process
order
received
create
bom
check
inventory
rfq
and
ordering
create
list
of
needed
materials
request
procurement
ra
cti
t
fo
ven
legal
solicit
bids
co
dor
place
order
accepted
ns
atio
cle
unic
mm
view
cy
le
c
yc
e
r
ision
dec
collaboration
users
review
bids
es
fy
qu
noti
re
y
tif
tify
notify
no
no
finance
on
production
create
bom
review
proc
ess
contract
locate
team
member
with
knowledge
portalintranet
emailimproductivity
tools
where
teams
can
share
knowledge
team
sites
mysites
social
computing
portal
productivity
server
users
infrastructure
pi
mobile
webvoice
access
voip
real
time
pervasive
communication
email
collaboration
suiteblogswikis
presence
im
identity
access
management
document
workflow
multimedia
approvals
messaging
enterprise
search
access
control
contract
and
po
management
people
search
knowledge
search
figure
matching
the
rfq
process
flow
to
a
productivity
infrastructure
showing
the
connections
between
process
steps
and
collaboration
communication
and
knowledge
sharing
areas
of
the
pi
in
figure
we
see
how
productivity
infrastructure
can
help
prodcos
procurement
staff
collaborate
with
one
another
as
well
as
other
groups
share
knowledge
and
communicate
efficiently
in
the
fulfillment
of
the
rfq
process
in
the
early
steps
of
the
process
from
order
received
through
create
list
of
needed
materials
the
procurement
staff
are
notified
of
changes
in
order
status
and
impending
rfq
workflow
the
specific
mechanism
of
notification
could
vary
though
it
would
probably
be
an
email
alert
or
a
change
in
an
order
status
screen
on
the
intranet
as
the
procurement
staff
need
to
solicit
and
review
bids
they
can
use
the
team
sites
and
search
features
of
the
pi
to
find
expertise
that
may
rest
with
individuals
throughout
the
company
in
our
example
if
the
procurement
staffer
searched
for
the
name
of
the
product
that
gets
shipped
from
mexico
he
or
she
might
be
directed
to
a
wiki
or
blog
that
communicates
the
salient
details
of
shipment
in
hot
weather
that
would
enable
even
an
inexperienced
procurement
staffer
to
avoid
the
problem
that
has
plagued
others
once
that
kind
of
knowledge
is
extant
and
searchable
it
is
harder
for
the
organization
to
lose
the
web
type
of
features
that
allow
individual
users
to
create
their
own
material
easily
but
also
securely
is
an
underpinning
of
successful
pi
stakeholders
in
the
process
can
work
on
documents
such
as
contracts
and
rfqs
in
a
virtual
collaboration
environment
and
document
management
system
throughout
the
process
is
communication
pervasive
and
real
time
through
email
phone
mobile
devices
im
and
web
taylor
eventdriven
productivity
infrastructure
meetings
the
net
effect
of
this
sophisticated
pi
is
a
faster
procurement
cycle
with
greater
sharing
of
knowledge
in
real
time
and
preservation
of
knowledge
pi
has
the
potential
to
help
prodco
realize
its
business
objective
of
rapid
accurate
procurement
you
might
imagine
based
on
robust
productivity
functionality
shown
in
figure
that
even
without
integration
of
the
underlying
enterprise
eda
applications
you
would
be
ahead
of
the
game
having
solid
connectivity
between
stakeholders
in
real
time
and
streamlined
access
to
documents
and
knowledge
is
a
big
boost
to
productivity
even
without
tight
integration
with
erp
and
crm
however
as
you
start
to
tie
the
two
sets
of
systems
together
the
benefits
become
striking
assuming
of
course
that
the
organization
and
users
are
up
to
the
challenge
of
making
it
all
work
edapi
integration
requirements
what
will
it
take
to
integrate
prodcos
pi
and
eda
to
keep
it
simple
and
focused
so
we
can
learn
we
will
look
at
the
functional
requirements
for
edapi
integration
as
they
relate
to
the
procurement
example
only
the
following
are
the
requirements
that
would
drive
improved
productivity
in
the
procurement
process
through
connection
between
the
underlying
edaenabled
erp
and
crm
applications
and
the
productivity
infrastructure
we
will
also
assign
this
hypothetical
project
a
name
we
are
considering
integrating
prodcos
pi
with
its
eda
so
the
name
pieda
fits
well
it
sounds
a
bit
like
a
geek
fraternity
which
in
a
sense
it
is
pieda
erp
erp
search
search
results
team
site
with
rss
feed
email
document
archive
figure
wireframe
mockup
of
a
composite
ui
for
pieda
showing
a
single
interface
that
contains
erp
features
search
email
team
site
with
rss
feed
and
a
document
archive
one
of
the
first
requirements
that
the
pieda
team
will
have
to
figure
out
is
the
interface
there
are
two
basic
choices
integrate
the
productivity
tools
into
the
edaenabled
erp
and
crm
applications
or
surface
the
erp
and
crm
applications
through
the
productivity
infrastructure
tools
both
options
require
the
use
of
apis
and
custom
tooling
for
implementation
though
neither
requires
creating
interfaces
wholly
from
scratch
the
major
productivity
suites
are
available
with
apis
and
development
kits
that
enable
integration
of
interfaces
and
routing
and
transformation
of
messaging
to
and
from
enterprise
systems
taylor
eventdriven
productivity
infrastructure
the
first
option
which
is
shown
in
figure
puts
the
edaenabled
erp
app
into
the
same
ui
as
email
document
archive
search
and
a
team
site
with
rss
feeds
in
this
kind
of
unified
dashboard
the
procurement
staffer
can
work
on
specific
rfqs
and
have
a
view
of
his
or
her
email
relevant
documents
and
team
updates
without
leaving
the
erp
app
in
the
second
option
the
erp
app
might
appear
as
a
side
bar
in
the
email
client
for
example
the
best
practice
for
this
entire
issue
might
be
to
do
some
research
first
consulting
the
end
users
and
showing
them
the
mockups
to
get
input
on
how
they
prefer
to
work
before
committing
to
one
approach
or
another
as
shown
in
figure
one
of
the
most
basic
features
of
pieda
is
the
ability
to
automate
notification
of
procurement
process
status
changes
to
stakeholders
when
an
order
is
received
from
the
crm
system
the
end
user
is
notified
perhaps
through
an
email
alert
same
thing
when
the
create
bom
process
is
executed
in
the
erp
system
the
procurement
person
is
notified
and
so
forth
through
check
inventory
and
create
list
of
needed
materials
this
real
time
or
rapid
notification
of
end
users
of
changes
in
state
in
the
eda
serves
to
prompt
action
on
the
part
of
the
end
user
for
example
if
the
procurement
staffer
is
alerted
that
an
order
is
going
into
the
check
inventory
state
then
he
or
she
can
consult
the
team
site
for
background
information
on
this
type
of
order
and
be
ready
to
handle
the
vendor
selection
right
away
in
this
way
pieda
connects
the
enterprise
nervous
system
of
eda
right
to
the
human
thought
processes
necessary
for
completion
of
the
process
flow
following
the
process
flow
shown
in
figure
the
next
requirement
for
pieda
we
need
to
address
is
the
request
for
action
that
occurs
when
the
process
reaches
the
request
procurement
stage
when
the
bill
of
materials
has
been
generated
and
the
inventory
checked
and
the
list
of
needed
materials
drawn
the
procurement
is
now
ready
to
begin
pieda
will
alert
the
procurement
staffer
that
he
or
she
needs
to
create
an
rfq
and
solicit
bids
at
first
this
would
probably
be
an
email
that
requests
that
action
be
taken
to
make
the
process
efficient
though
the
email
should
contain
an
embedded
link
that
will
take
the
end
user
to
exactly
the
right
screen
in
the
erp
app
where
the
rfq
can
commence
if
the
end
user
simply
receives
an
email
notifying
him
that
he
needs
to
go
to
the
erp
system
and
start
an
rfq
and
making
him
look
it
up
perhaps
by
copying
and
pasting
a
job
number
into
a
search
field
we
have
not
accomplished
very
much
in
terms
of
efficiency
this
innate
linking
from
email
blog
entries
im
texts
and
documents
through
to
the
actual
job
page
on
the
erp
system
is
an
essential
requirement
to
make
pieda
worth
the
effort
and
expense
users
should
be
able
to
toggle
effortlessly
between
pi
and
eda
without
having
to
look
up
the
job
detail
in
the
middle
of
the
process
as
the
rfq
and
bids
go
through
the
review
loops
pieda
needs
to
keep
decision
makers
close
to
each
other
and
to
the
related
documents
the
erp
app
needs
to
show
the
presence
of
stakeholders
so
that
all
the
people
involved
in
the
process
can
connect
with
one
another
either
through
im
email
phone
or
by
looking
up
information
that
was
authored
by
a
particular
person
or
team
in
other
words
if
a
procurement
staffer
receives
an
alert
that
he
must
review
a
draft
of
an
rfq
the
draft
of
the
document
should
appear
in
the
same
interface
as
the
alert
then
the
draft
should
show
the
presence
of
its
authors
with
their
availability
for
im
email
or
phone
instantly
visible
alternatively
a
user
should
be
able
to
link
on
the
mysite
teamsite
or
blog
of
any
document
author
or
group
of
authors
in
order
to
learn
more
about
what
they
know
about
the
procurement
process
it
should
be
possible
in
pieda
to
conduct
a
search
through
the
documents
blogs
wikis
teamsites
mysites
and
erp
business
data
to
find
relevant
information
about
the
procurement
or
the
project
itself
through
an
enterprise
search
interface
and
backend
enterprise
search
engine
the
end
user
needs
to
be
able
to
look
up
any
missing
information
about
the
procurement
in
our
example
if
the
procurement
staffer
searches
for
the
component
that
needs
to
be
shipped
in
a
refrigerated
truck
he
or
she
should
see
the
pertinent
notes
about
shipment
in
the
search
results
taylor
eventdriven
productivity
infrastructure
or
at
the
very
least
get
a
search
result
that
points
to
documents
that
contain
the
needed
information
a
more
sophisticated
version
of
the
enterprise
search
scenario
described
above
involves
including
people
in
the
search
results
if
the
end
user
conducts
a
search
for
the
billofmaterials
components
the
search
results
could
contain
both
a
list
of
documents
related
to
the
components
as
well
as
the
authors
including
their
presence
and
knowledge
contributions
to
the
organization
that
way
if
a
procurement
staffer
cannot
find
exactly
what
he
is
looking
for
he
can
click
on
the
results
of
a
people
search
and
connect
to
expertise
either
live
or
through
a
published
knowledge
contribution
such
as
a
blog
or
wiki
business
intelligence
should
be
a
requirement
for
pieda
though
not
perhaps
a
dropdead
necessity
bi
gives
stakeholders
the
ability
to
analyze
data
and
create
reports
that
lead
to
organizational
knowledge
for
example
it
may
not
be
known
that
certain
component
gets
destroyed
by
heat
in
transit
if
a
procurement
staffer
ran
a
report
on
job
orders
that
exceeded
planned
costs
he
or
she
might
notice
that
certain
types
orders
that
contained
a
specific
component
which
melted
in
transit
all
resulted
in
poor
financial
results
for
their
respective
orders
of
course
such
bi
functionality
already
exists
in
many
erp
systems
the
challenge
for
pieda
is
to
make
it
available
to
users
easily
through
the
portal
front
end
of
the
productivity
infrastructure
this
availability
helps
expose
the
knowledge
potential
of
the
business
intelligence
and
going
further
with
rss
feeds
and
subscriptions
it
becomes
possible
to
alert
people
of
new
knowledge
without
the
receivers
of
the
knowledge
needing
to
know
in
advance
to
look
for
it
finally
with
an
edapi
connection
the
rss
feed
itself
becomes
an
event
with
the
potential
to
trigger
action
the
collaborative
workflow
for
document
creation
needs
to
be
manifest
through
pieda
as
end
users
crate
documents
and
revise
them
they
must
be
able
to
see
who
has
contributed
to
the
drafts
and
be
aware
of
their
presence
if
they
need
to
contact
them
the
document
management
functions
of
pieda
need
to
be
able
to
route
documents
along
approval
paths
allowing
for
final
approvers
to
be
aware
that
drafts
have
been
created
for
their
review
the
ability
to
set
up
an
instant
online
web
meeting
or
conference
call
to
review
a
document
in
real
time
should
be
built
into
pieda
bottom
line
pieda
needs
to
provide
users
with
real
time
or
near
real
time
access
and
awareness
about
events
that
occur
in
the
erp
and
crm
systems
pieda
needs
to
give
users
access
to
the
people
who
create
documents
and
data
inputs
to
the
system
the
goal
is
streamlined
rapid
decision
making
that
results
in
the
best
possible
decisions
pieda
needs
to
stimulate
the
creation
and
distribution
of
knowledge
in
an
effortless
manner
users
need
to
find
or
receive
knowledge
passively
piedas
target
architecture
having
outlined
pieda
functional
requirements
the
challenge
now
is
to
relate
them
to
a
target
architecture
for
the
development
of
a
working
eda
after
all
the
goal
of
pieda
is
to
reduce
the
amount
of
random
and
unstructured
communication
between
people
as
they
manage
the
information
in
the
crm
and
erp
systems
doing
this
means
connecting
events
in
those
systems
to
automated
and
semiautomation
actions
in
the
productivity
infrastructure
the
first
step
in
this
process
is
to
understand
how
the
functional
requirements
map
to
events
in
the
overall
architecture
taylor
eventdriven
productivity
infrastructure
users
portalintranet
emailimproductivity
tools
internal
pi
event
processing
a
b
pi
communications
framework
portal
server
pieda
event
processing
pieda
event
processors
productivity
infrastructure
pi
identity
access
mobile
management
webvoice
access
pieda
event
listeners
voip
email
presence
im
document
workflow
approvals
collaboration
suiteblogswikis
event
producer
event
processor
event
producer
event
processor
event
producer
event
processor
event
producer
event
processor
team
sites
enterprise
search
mysites
social
computing
internal
erpcrm
event
processing
c
event
listeners
event
processors
esb
event
web
convertorder
services
crm
neworder
createbom
checkinv
neededmat
dorfq
dopo
erpfinance
figure
target
architecture
for
pieda
showing
three
separate
areas
of
event
processing
the
crm
and
erp
systems
cycle
event
data
between
themselves
area
c
as
does
the
productivity
infrastructure
area
a
pieda
area
b
listens
for
event
data
from
both
and
produces
its
own
events
all
three
event
processing
areas
listen
for
each
others
events
figure
shows
a
target
architecture
for
pieda
notable
is
the
contrast
to
earlier
eda
examples
we
have
explored
which
have
one
area
of
event
processing
pieda
has
three
there
are
events
produced
listened
for
and
processed
at
the
level
of
the
crm
and
erp
systems
shown
as
area
c
in
the
figure
in
addition
the
productivity
infrastructure
itself
has
a
whole
event
processing
setup
shown
as
area
a
in
the
figure
this
is
an
interesting
discovery
for
anyone
getting
under
the
hood
of
a
productivity
suite
it
has
many
eventdriven
features
right
out
of
the
box
whether
youre
dealing
with
microsoft
sharepoint
and
office
ibm
lotus
or
others
you
will
find
a
handsome
compliment
of
event
processing
going
on
inside
the
application
suite
for
example
sharepoint
has
numerous
automated
notifications
of
document
draft
changes
and
blog
posts
and
so
forth
the
third
area
of
event
processing
area
b
is
piedas
actual
integration
between
areas
a
and
c
as
depicted
in
figure
piedas
event
processing
area
is
contained
within
the
portal
server
however
it
need
not
be
we
are
approach
pieda
as
if
it
were
going
to
be
developing
using
custom
development
apis
built
onto
the
portal
server
when
undertaking
a
project
such
as
pieda
many
different
alternatives
may
in
fact
be
more
attractive
for
example
it
might
make
the
most
sense
to
build
pieda
on
top
of
the
erpcrm
service
bus
or
develop
it
on
its
own
standalone
application
server
the
bottom
line
though
is
it
will
have
to
be
built
at
this
time
there
is
no
out
of
the
box
solution
for
the
kind
of
functionality
envisioned
for
pieda
figure
is
a
rather
complicated
picture
unfortunately
however
though
piedas
abc
setup
is
complex
the
beauty
of
it
is
that
areas
a
and
c
can
operate
quite
well
on
their
own
even
taylor
eventdriven
productivity
infrastructure
if
you
take
out
b
the
pieda
event
processing
center
pieda
is
an
incremental
upgrade
to
the
architecture
and
the
event
processing
capabilities
of
the
pi
and
the
backend
are
not
reliant
on
it
i
mention
this
because
some
might
look
at
figure
and
decide
that
the
effort
is
not
worth
the
complexity
on
the
contrary
the
productivity
gains
should
justify
the
work
of
making
it
happen
plus
if
its
done
right
the
complexity
of
pieda
need
not
result
in
an
excess
of
administrative
load
or
inhibitions
of
process
agility
to
illustrate
how
the
target
architecture
for
pieda
fulfills
on
the
functional
requirements
ill
walk
through
one
specific
example
the
event
flow
using
the
requirement
of
request
procurement
lets
examine
the
specific
eda
functions
that
pieda
needs
to
realize
in
order
to
make
the
requirement
work
the
requirement
specifies
that
the
erp
system
inform
that
procurement
staffer
that
procurement
is
needed
for
a
list
of
items
the
following
flow
of
process
steps
describes
how
this
requirement
could
be
fulfilled
adding
in
the
events
that
are
produced
and
listened
to
at
each
step
step
event
producers
event
listeners
event
processors
reaction
comment
notify
procurement
staffer
that
procurement
is
needed
dorfq
pieda
area
a
area
b
email
server
area
a
send
email
that
carries
event
state
email
should
contain
dynamic
links
to
underlying
documents
and
presence
information
for
stakeholders
if
collaboration
is
needed
create
im
session
to
discuss
rfq
pieda
portal
server
area
b
if
documents
are
needed
to
support
procurement
practively
link
staffer
with
documents
pieda
portal
server
area
b
working
through
word
processor
generate
vendor
solicitation
emails
pieda
portal
server
area
b
order
number
skus
needed
pieda
area
b
im
server
area
a
create
im
session
that
is
populated
with
event
state
information
requires
xml
carried
on
sip
pieda
portal
server
area
b
pieda
portal
server
area
b
publish
document
update
in
document
library
on
pieda
document
needs
to
contain
author
presence
data
and
links
to
author
mysite
and
teamsite
pieda
portal
server
area
b
email
server
area
b
create
email
populated
with
rfq
data
rfq
data
should
be
in
state
carried
through
event
publication
createim
postdocument
createvendsol
table
connecting
event
producers
listeners
processors
and
reactions
to
process
steps
in
request
procurement
once
again
our
old
eda
friend
carrying
state
surfaces
in
pieda
in
order
for
an
email
or
im
session
to
be
generated
as
a
reaction
to
an
event
the
event
processor
must
have
access
to
the
event
state
data
in
the
event
message
for
example
if
the
user
initiates
the
createim
command
which
starts
an
instant
message
session
with
another
stakeholder
the
requirement
is
that
the
im
session
will
automatically
contain
data
about
the
specific
procurement
under
discussion
as
well
as
links
to
the
erp
system
files
as
well
as
documents
that
need
to
be
discussed
to
do
this
the
createim
command
needs
to
contain
a
function
that
lets
it
search
for
already
published
event
data
about
the
procurement
in
question
in
effect
createim
is
a
twostate
command
series
that
looks
like
this
taylor
eventdriven
productivity
infrastructure
when
user
initiates
createim
command
for
procurement
xyz
search
message
queue
of
events
published
for
dorfq
and
find
procurement
xyz
data
initiate
im
session
through
sip
carrying
xyz
data
as
xml
bound
to
sip
i
use
this
im
example
for
a
reason
namely
that
sip
to
xml
integration
is
not
easy
and
the
standards
involved
continue
to
evolve
binding
soap
to
sip
also
challenging
to
the
point
where
some
sources
say
it
is
not
possible
or
reliable
however
this
is
exactly
the
kind
of
integration
that
is
needed
to
make
edapi
integration
a
success
and
the
integration
needs
to
be
flexible
allowing
low
friction
for
rapid
changes
in
configuring
im
session
generation
with
changing
business
process
models
it
will
take
more
than
average
effort
to
get
it
to
work
but
pieda
should
generate
greater
than
average
roi
the
broader
point
is
that
pieda
area
b
needs
to
be
a
flexible
switchboard
connecting
the
event
activities
with
areas
a
and
c
in
order
to
create
roi
and
justification
of
the
whole
project
if
pieda
is
too
rigid
and
changes
are
time
consuming
or
expensive
then
the
eda
pi
integration
will
not
serve
its
business
purpose
while
this
statement
could
be
made
about
almost
any
application
or
architecture
project
it
is
particularly
true
for
pi
pi
is
inherently
more
unstructured
more
unpredictable
than
conventional
it
situations
implementation
given
the
complexity
of
pieda
achieving
the
high
degree
of
flexibility
envisioned
above
is
a
double
challenge
not
only
does
your
development
team
have
to
create
an
architecture
that
is
wholly
new
and
do
so
with
custom
development
they
must
create
an
architecture
that
is
highly
flexible
too
some
wise
people
might
declare
the
challenge
not
worth
it
at
the
outset
while
these
wise
people
wouldnt
be
entirely
wrong
for
wanting
to
avoid
the
hassle
of
entering
uncharted
waters
the
good
news
is
that
pieda
can
actually
be
deployed
in
very
small
increments
looking
at
figure
x
you
can
understand
that
area
a
already
exists
in
some
form
virtually
every
sizable
business
in
the
world
has
an
email
system
an
intranet
of
some
kind
and
suites
of
productivity
applications
voip
and
corporate
im
are
on
the
ascent
as
well
building
area
a
from
scratch
is
not
an
issue
area
c
exists
in
its
component
parts
and
exposing
web
services
and
creating
an
eda
is
a
decision
that
is
separate
from
building
pieda
there
would
be
a
good
rationale
for
creating
an
eda
at
the
crm
and
erp
system
level
for
its
own
sake
the
key
takeaway
for
thinking
about
implementing
pieda
is
to
understand
that
area
b
can
be
developed
in
stages
in
fact
it
can
be
deployed
one
feature
at
a
time
after
a
core
set
of
eda
infrastructure
pieces
have
been
put
in
place
unlike
area
c
which
needs
a
certain
number
of
event
producers
listeners
and
processors
to
hit
critical
mass
and
function
pieda
can
start
quite
small
pieda
can
take
one
instance
of
event
processing
such
as
request
procurement
and
put
it
into
full
effect
this
approach
might
even
be
the
optimal
way
of
getting
it
off
the
ground
given
the
fickle
nature
of
humanmachine
interaction
which
is
truly
at
the
heart
of
pieda
it
might
be
smart
to
design
test
and
deploy
in
tiny
increments
while
the
dev
team
might
think
its
really
cool
to
have
an
automated
im
session
generated
users
might
scoff
at
such
a
feature
to
save
time
and
resources
and
assure
the
highest
level
of
success
piedas
implementation
plan
should
include
a
thorough
usability
testing
and
feedback
cycle
end
users
need
to
be
included
intensely
throughout
piedas
lifecycle
this
is
especially
relevant
because
pieda
does
not
rely
on
prepackaged
software
which
usually
undergoes
its
own
round
of
usability
tests
and
market
research
in
the
future
though
pieda
type
platforms
might
become
common
today
though
its
an
unexplored
frontier
free
tip
for
readers
if
anyone
is
brave
enough
to
stake
a
claim
in
this
space
venture
capitalists
might
find
it
interesting
taylor
eventdriven
productivity
infrastructure
again
in
the
spirit
of
not
repeating
what
has
already
been
discussed
in
great
depth
previously
lets
touch
briefly
on
governance
governance
is
where
the
complexity
of
pieda
can
be
a
challenge
with
pieda
you
are
talking
about
integrating
eda
components
on
multiple
platforms
with
all
the
federation
and
mediation
that
involves
and
you
will
confront
the
fact
that
productivity
infrastructure
typically
comes
with
its
own
builtin
identity
management
apparatus
that
you
cant
really
switch
off
it
may
be
possible
to
adapt
the
pis
identity
management
system
for
use
in
the
broader
eda
or
you
may
be
able
to
federate
the
identity
management
and
governance
solutions
lifecycle
and
provisioning
will
also
be
built
in
to
the
pi
and
it
is
almost
certain
that
you
will
need
to
keep
those
functions
in
place
despite
the
fact
that
you
will
not
be
able
to
use
those
functions
for
life
cycle
and
provisioning
of
the
eda
components
all
of
these
challenges
can
be
solved
however
with
time
and
effort
in
planning
for
pieda
assume
that
governance
will
be
a
major
investment
conclusion
we
are
at
the
very
start
of
the
movement
towards
sophisticated
integration
of
eda
and
pi
early
examples
of
this
technological
paradigm
include
the
microsoftsap
duet
product
which
integrates
outlook
email
with
sap
applications
or
the
lotus
sametime
integration
with
webspherebased
business
applications
an
interesting
trend
in
the
evolution
of
edapi
is
the
use
of
the
cloud
in
linking
events
and
productivity
tools
early
examples
of
this
include
facebook
coms
ability
to
create
discussion
threads
and
mobile
alerts
based
on
postings
to
a
users
page
by
other
network
members
or
salesforce
coms
connectivity
with
the
outlook
email
client
taking
advantage
of
web
services
it
is
likely
that
more
sophisticated
edapi
integrations
will
continue
to
develop
as
the
workforce
becomes
more
accustomed
to
pervasive
mobile
computing
as
a
mode
of
work
the
need
for
disparate
groups
of
people
to
communicate
smoothly
on
fastmoving
business
issues
regardless
of
location
or
computing
platform
should
drive
ever
increasing
capabilities
in
edapi
solutions
this
is
all
the
more
relevant
as
a
younger
generation
who
have
known
nothing
other
than
mobile
computing
arrives
in
the
workplace
and
expects
to
conduct
business
in
real
time
across
a
myriad
of
temporal
and
spatial
factors
taylor
eventdriven
productivity
infrastructure
